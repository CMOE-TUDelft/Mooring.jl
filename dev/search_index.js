var documenterSearchIndex = {"docs":
[{"location":"API/Physics/SeaBed/#Sea-bed-external-loading","page":"Sea bed external loading","title":"Sea bed external loading","text":"","category":"section"},{"location":"API/Physics/SeaBed/#Mooring.SeaBed.ramp_linear-Tuple{Mooring.ParameterHandlers.SeaBedParameters, Real}","page":"Sea bed external loading","title":"Mooring.SeaBed.ramp_linear","text":"ramp_linear\n\nThis function returns the linear ramp function for a given excursion into the sea bed. It assumes the excursion is positive when there is penetration into the soil and computes the value based on  the penetration_depth_ramp parameter: \n\nx_textnew = fracxtextpenetration_depth_ramp\n\nInput:\n\nparams::SeaBedParameters: Sea bed parameters\nexc::Real: excursion value at a given time\n\nOutput:\n\nReal: Linear ramp function value\n\n\n\n\n\n","category":"method"},{"location":"API/Physics/SeaBed/#Mooring.SeaBed.ramp_tanh-Tuple{Mooring.ParameterHandlers.SeaBedParameters, Real}","page":"Sea bed external loading","title":"Mooring.SeaBed.ramp_tanh","text":"ramp_tanh\n\nThis function returns the tanh ramp function for a given excursion into the sea bed. It assumes the excursion is positive when there is penetration to the sea bed and negative when  the line is lifted from the soil. The function is defined as:\n\nx_textnew = max(0 2 tanh( texttanh_ramp cdot x ) )\n\nInput:\n\nparams::SeaBedParameters: Sea bed parameters\nexc::Real: excursion value at a given time\n\nOutput:\n\nReal: Tanh ramp function value\n\n\n\n\n\n","category":"method"},{"location":"API/Physics/SeaBed/#Mooring.SeaBed.sea_bed_force-Tuple{Mooring.ParameterHandlers.SeaBedParameters, Gridap.TensorValues.VectorValue, Gridap.TensorValues.TensorValue, Gridap.TensorValues.VectorValue, Real, Gridap.TensorValues.VectorValue, Gridap.TensorValues.TensorValue, Gridap.TensorValues.VectorValue}","page":"Sea bed external loading","title":"Mooring.SeaBed.sea_bed_force","text":"seabedforce\n\nThis function computes the force exerted by the sea bed on the mooring line. It considers the excursion of the line into the sea bed, the velocity of the line, and the properties of the sea bed. The function is defined as:\n\nalpha_1 * w + alpha_2 * k * s_Lambda * ( x_z - beta_1 * v_z - beta_2 * v_z * abs(v_z) )\n\nInput:\n\nparams::SeaBedParameters: Sea bed parameters\nX::VectorValue: Position of the line\nQTr::TensorValue: Transformation matrix $ Q^T $\nT1s::TensorValue: Stress tensor\nT1m::Real: Maximum stress\nu::VectorValue: Displacement of the line\n∇u::TensorValue: Gradient of the displacement\nv::VectorValue: Velocity of the line\n\nOutput:\n\nVectorValue: Force exerted by the sea bed at a given point in the line\n\n\n\n\n\n","category":"method"},{"location":"API/Physics/SeaBed/#Mooring.SeaBed.set_still_weight-Tuple{Mooring.ParameterHandlers.SeaBedParameters, Real}","page":"Sea bed external loading","title":"Mooring.SeaBed.set_still_weight","text":"setstillweight\n\nThis function sets the still weight of the sea bed. It assumes the sea bed object is already created and modifies the still weight parameter.\n\nInput: \n\nparams::SeaBedParameters: Sea bed parameters\nstill_weight::Real: Still weight [N]\n\nOutput:\n\nSeaBedParameters: Sea bed parameters with the still weight modified\n\n\n\n\n\n","category":"method"},{"location":"API/Physics/TangentialDiffCalculus/#Tangential-Differential-Calculus","page":"Tangential Differential Calculus","title":"Tangential Differential Calculus","text":"","category":"section"},{"location":"API/Physics/TangentialDiffCalculus/#Mooring.TangentialDiffCalculus.Edir-Tuple{Gridap.TensorValues.TensorValue}","page":"Tangential Differential Calculus","title":"Mooring.TangentialDiffCalculus.Edir","text":"Edir(FΓ::TensorValue)\n\nDirectional Green-Lagrange strain\n\nThis function returns the directional Green-Lagrange strain for a given line deformation gradient FΓ.  The directional Green-Lagrange strain is defined as:\n\nmathbfE_textdir = 05(mathbfF_Γ^TmathbfF_Γ - mathbfI)\n\nwhere I is the identity tensor. The dimensions of the directional Green-Lagrange strain are n×n, where n is the dimension of the physical space.\n\n\n\n\n\n","category":"method"},{"location":"API/Physics/TangentialDiffCalculus/#Mooring.TangentialDiffCalculus.Etang-Tuple{Gridap.TensorValues.TensorValue, Gridap.TensorValues.TensorValue}","page":"Tangential Differential Calculus","title":"Mooring.TangentialDiffCalculus.Etang","text":"Etang(P::TensorValue,Edir::TensorValue)\n\nTangential Green-Lagrange strain\n\nThis function returns the tangential Green-Lagrange strain for a given projection operator P and directional Green-Lagrange strain Edir. The tangential Green-Lagrange strain is defined as:\n\nmathbfE_texttang = mathbfPmathbfE_textdirmathbfP\n\nThe dimensions of the tangential Green-Lagrange strain are n×n, where n is the dimension of the physical space.\n\n\n\n\n\n","category":"method"},{"location":"API/Physics/TangentialDiffCalculus/#Mooring.TangentialDiffCalculus.FΓ-Tuple{Gridap.CellData.CellField, Gridap.CellData.CellField}","page":"Tangential Differential Calculus","title":"Mooring.TangentialDiffCalculus.FΓ","text":"FΓ(u::CellField,X::CellField)\n\nLine deformation gradient\n\nThis function returns the line deformation gradient for a given displacement field u, and  a map field X. The line deformation gradient is defined as:\n\nF_Γ = _x^Γdir(u) + I\n\nwhere I is the identity tensor. The dimensions of the line deformation gradient are n×n, where n is the dimension of the physical space.\n\n\n\n\n\n","category":"method"},{"location":"API/Physics/TangentialDiffCalculus/#Mooring.TangentialDiffCalculus.FΓ-Tuple{Gridap.TensorValues.TensorValue}","page":"Tangential Differential Calculus","title":"Mooring.TangentialDiffCalculus.FΓ","text":"FΓ(∇xΓdir_u::TensorValue)\n\n∇xΓdir (Line deformation gradient)\n\n\n\n\n\n","category":"method"},{"location":"API/Physics/TangentialDiffCalculus/#Mooring.TangentialDiffCalculus.G-Tuple{Any}","page":"Tangential Differential Calculus","title":"Mooring.TangentialDiffCalculus.G","text":"G(J)\n\nMetric tensor\n\nThis function returns the metric tensor of a given coordinate map field X. The metric tensor is defined as: $ \\mathbf{G} = \\mathbf{J}^T \\cdot \\mathbf{J} $, with $ \\mathbf{J} $ the J operator of the map field X.\n\nNote that the dimensions of the metric tensor are 1×1.\n\n\n\n\n\n","category":"method"},{"location":"API/Physics/TangentialDiffCalculus/#Mooring.TangentialDiffCalculus.J-Tuple{Gridap.CellData.CellField}","page":"Tangential Differential Calculus","title":"Mooring.TangentialDiffCalculus.J","text":"J(X::CellField)\n\nJacobian operator\n\nThis function returns the Jacobian operator of a given coordinate map field X. We use the transpose as  the gradient operator is defined as ∇(X)=∇×X in Gridap. The Jacobian operator is defined as:\n\nmathbfJ(mathbfX) = _r(mathbfX) = \fracX_ir_j\n\nNote that the dimensions of the Jacobian operator are n×1, where n is the dimension of the physical space.\n\n\n\n\n\n","category":"method"},{"location":"API/Physics/TangentialDiffCalculus/#Mooring.TangentialDiffCalculus.P-Tuple{Any}","page":"Tangential Differential Calculus","title":"Mooring.TangentialDiffCalculus.P","text":"P(J)\n\nProjection operator\n\nThis function returns the projection operator of a given vector field u onto the tangent space of the map field X. The projection operator is defined as:\n\nmathbfP = frac mathbfJmathbfJ  mathbfJ^2\n\nNote that the dimensions of the projection operator are n×n, where n is the dimension of the physical space.\n\n\n\n\n\n","category":"method"},{"location":"API/Physics/TangentialDiffCalculus/#Mooring.TangentialDiffCalculus.Q-Tuple{Any}","page":"Tangential Differential Calculus","title":"Mooring.TangentialDiffCalculus.Q","text":"Q(J)\n\nTransformation matrix\n\nThis function returns the transformation matrix $ \\mathbf{Q} $ of a given coordinate map field X.  The transformation matrix is defined as: \n\nmathbfQ = mathbfJcdotmathbfG^-1\n\nNote that the dimensions of the transformation matrix are n×1, where n is the dimension of the physical space.\n\n\n\n\n\n","category":"method"},{"location":"API/Physics/TangentialDiffCalculus/#Mooring.TangentialDiffCalculus.g-Tuple{Any}","page":"Tangential Differential Calculus","title":"Mooring.TangentialDiffCalculus.g","text":"g(j)\n\nMetric tensor in the physical space\n\nThis function returns the metric tensor in the physical space as:\n\ng = j^Tj\n\nNote that the dimensions of the metric tensor in the physical space are 1×1.\n\n\n\n\n\n","category":"method"},{"location":"API/Physics/TangentialDiffCalculus/#Mooring.TangentialDiffCalculus.j-Tuple{Any, Any}","page":"Tangential Differential Calculus","title":"Mooring.TangentialDiffCalculus.j","text":"j(FΓ,J)\n\nJacobian operator in the physical space\n\nThis function returns the Jacobian determinant in the physical space for a given line deformation gradient FΓ and Jacobian operator J. The Jacobian determinant in the physical space is defined as:\n\nj = FΓ^TJ\n\nNote that the dimensions of the Jacobian determinant in the physical space are n×1.\n\n\n\n\n\n","category":"method"},{"location":"API/Physics/TangentialDiffCalculus/#Mooring.TangentialDiffCalculus.q-Tuple{Any}","page":"Tangential Differential Calculus","title":"Mooring.TangentialDiffCalculus.q","text":"q(j)\n\nTransformation matrix in the physical space\n\nThis function returns the transformation matrix in the physical space as:\n\nq = jg^-1\n\nNote that the dimensions of the transformation matrix in the physical space are n×1, where n is the dimension of the physical space.\n\n\n\n\n\n","category":"method"},{"location":"API/Physics/TangentialDiffCalculus/#Mooring.TangentialDiffCalculus.Λ-Tuple{Any, Any}","page":"Tangential Differential Calculus","title":"Mooring.TangentialDiffCalculus.Λ","text":"Λ(j,J)\n\nLine stretch\n\nThis function returns the stretch of a given line. The stretch is defined as:\n\nΛ = fracdet(g)det(G)\n\nwhere g is the metric tensor in the physical space, and G is the metric tensor in the reference space. The result is a scalar.\n\n\n\n\n\n","category":"method"},{"location":"API/Physics/TangentialDiffCalculus/#Mooring.TangentialDiffCalculus.∇ₓΓdir-Tuple{Gridap.CellData.CellField, Gridap.CellData.CellField}","page":"Tangential Differential Calculus","title":"Mooring.TangentialDiffCalculus.∇ₓΓdir","text":"∇ₓΓdir(u::CellField,X::CellField)\n\nTangential gradient\n\nThis function returns the tangential gradient of a given vector field u. The tangential gradient is defined as:\n\n_x^Γdir(u) = _r(u)Q\n\nNote that the dimensions of the tangential gradient are n×n, where n is the dimension of the physical space.\n\n\n\n\n\n","category":"method"},{"location":"API/Physics/TangentialDiffCalculus/#Mooring.TangentialDiffCalculus.∇ₓΓdir-Tuple{Gridap.TensorValues.TensorValue, Gridap.TensorValues.TensorValue}","page":"Tangential Differential Calculus","title":"Mooring.TangentialDiffCalculus.∇ₓΓdir","text":"∇ₓΓdir(∇u::TensorValue,J::TensorValue)\n\n∇ₓΓdir (Tangential gradient)\n\n\n\n\n\n","category":"method"},{"location":"API/Physics/PointMotion/#Point-Motion","page":"Point Motion","title":"Point Motion","text":"","category":"section"},{"location":"API/Physics/PointMotion/#Mooring.PointMotion.CustomMotionType","page":"Point Motion","title":"Mooring.PointMotion.CustomMotionType","text":"CustomMotion Struct \n\nThis struct is used to define the properties of the custom motion. This requires a function of space and time.     - f::Function: custom functions\n\n\n\n\n\n","category":"type"},{"location":"API/Physics/PointMotion/#Mooring.PointMotion.MotionType","page":"Point Motion","title":"Mooring.PointMotion.MotionType","text":"MotionType Struct\n\nThis abstract type is used to define the type of motion. Possible implemented options are:\n\nWaveMotion: Motion given by a waves (regular or irregular)\nCustomMotion: Custom function\n\n\n\n\n\n","category":"type"},{"location":"API/Physics/PointMotion/#Mooring.PointMotion.MotionType-Tuple{Int64, Mooring.ParameterHandlers.ParameterHandler}","page":"Point Motion","title":"Mooring.PointMotion.MotionType","text":"MotionType constructor\n\nThis function returns the motion of a point given its parameters. Input:\n\np_params::PointParameters: Parameters of the point\n\nOutput:\n\nmotion::MotionType: Motion of the point\n\n\n\n\n\n","category":"method"},{"location":"API/Physics/PointMotion/#Mooring.PointMotion.WaveMotionType","page":"Point Motion","title":"Mooring.PointMotion.WaveMotionType","text":"WaveMotion Struct \n\nThis struct is used to define the properties of the wave motion. This includes:     - waveparams::WaveParameters: wave Parameters     - pointmotion_function::Function: function that returns the position of a point in time\n\nThis struct precomputes the motion of a point given the motion type, input ramp, time and position. For a WaveMotionType the motion is calculated using the wave spectrum and the Airy wave theory. It calculates the position of a point in time at certain given time instances (t_range) and constructs an interpolable function that returns the interpolated value at  any given time.\n\nThis pre-computation is done to avoid evaluating the wave spectrum at each time step.\n\n\n\n\n\n","category":"type"},{"location":"API/Physics/PointMotion/#Mooring.PointMotion.get_point_motion_function-Tuple{Mooring.PointMotion.WaveMotionType}","page":"Point Motion","title":"Mooring.PointMotion.get_point_motion_function","text":"getpointmotion This function returns the motion function of a point given its motion type. Input:\n\nmotion_type::MotionType: Type of motion (WaveMotionType or CustomMotionType)\n\nOutput:\n\npoint_motion_function::Function: Interpolated position vector. It can be evaluated at any time instance\n\n\n\n\n\n","category":"method"},{"location":"DeveloperGuide/#Developer-Guide","page":"Developer Guide","title":"Developer Guide","text":"","category":"section"},{"location":"userguide/segments/#Defining-Segments","page":"Segments","title":"Defining Segments","text":"","category":"section"},{"location":"userguide/segments/","page":"Segments","title":"Segments","text":"Mooring segments represent the physical elements (ropes, chains, or synthetic cables) that connect two mooring points. Each segment connects a start point and a stop point, and has associated material and hydrodynamic properties.","category":"page"},{"location":"userguide/segments/","page":"Segments","title":"Segments","text":"Each segment is defined by the following parameters, see (`SegmentParameters):","category":"page"},{"location":"userguide/segments/","page":"Segments","title":"Segments","text":"id::Int - unique integer identifier\ntag::String – unique name or identifier\nstart_point::Int – ID of the starting point (refers to points)\nstop_point::Int – ID of the ending point (refers to points)\nmaterial_tag::String – reference to a material tag (defined in materials)\narea::Float64 – cross-sectional area [m²]\ndensity::Float64 – mass density\n(optional) drag_tag::String – reference to a drag law (defined in drags)\n(optional) seabed_tag::String – reference to seabed interaction (defined in seabeds)","category":"page"},{"location":"userguide/segments/","page":"Segments","title":"Segments","text":"","category":"page"},{"location":"userguide/segments/#YAML-example","page":"Segments","title":"YAML example","text":"","category":"section"},{"location":"userguide/segments/","page":"Segments","title":"Segments","text":"segments:\n  - id: 1\n    tag: seg1\n    start_point: 1\n    stop_point: 2\n    material: steel\n    area: 0.01\n    density: 7850.0\n    drag: no_drag\n    seabed: default_seabed","category":"page"},{"location":"userguide/segments/","page":"Segments","title":"Segments","text":"In this example:","category":"page"},{"location":"userguide/segments/","page":"Segments","title":"Segments","text":"seg1 connects point 1 (e.g. an anchor) to point 2 (e.g. a fairlead).","category":"page"},{"location":"userguide/segments/","page":"Segments","title":"Segments","text":"It uses the \"steel\" material defined in materials (see materials section). A cross-sectional area of 0.01 m² and density 7850 kg/m³ are provided. Hydrodynamic drag and seabed interaction are also specified.","category":"page"},{"location":"userguide/segments/","page":"Segments","title":"Segments","text":"","category":"page"},{"location":"userguide/segments/#Julia-example","page":"Segments","title":"Julia example","text":"","category":"section"},{"location":"userguide/segments/","page":"Segments","title":"Segments","text":"The same example can be directly defined in a julia script:","category":"page"},{"location":"userguide/segments/","page":"Segments","title":"Segments","text":"using Mooring\nimport Mooring.ParameterHandler as PH\nph.points[1] = PH.PointParameters(id=1, coords=[0.0,0.0,-50.0], motion_tag=\"fixed\")\nph.points[2] = PH.PointParameters(id=2, coords=[10.0,0.0,0.0], motion_tag=\"fairlead_motion\")\nph.segments[1] = PH.SegmentParameters(id=1, start_point=1, stop_point=2, material_tag=\"steel\", area=0.01,\n                                      density=7850.0, length=10.0, drag_tag=\"no_drag\", seabed_tag=\"default_seabed\")","category":"page"},{"location":"userguide/segments/","page":"Segments","title":"Segments","text":"Segments are turned into MooringSegment objects during line setup.","category":"page"},{"location":"userguide/installation/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"userguide/installation/","page":"Installation","title":"Installation","text":"To install the latest version of Mooring.jl:","category":"page"},{"location":"userguide/installation/#Using-Pkg-REPL-mode-(recommended)","page":"Installation","title":"Using Pkg REPL mode (recommended)","text":"","category":"section"},{"location":"userguide/installation/","page":"Installation","title":"Installation","text":"Open Julia  \nEnter the package manager by typing ]  \nAdd the package with:","category":"page"},{"location":"userguide/installation/","page":"Installation","title":"Installation","text":"pkg> add https://github.com/CMOE-TUDelft/Mooring.jl","category":"page"},{"location":"userguide/installation/#Using-Pkg-in-scripts","page":"Installation","title":"Using Pkg in scripts","text":"","category":"section"},{"location":"userguide/installation/","page":"Installation","title":"Installation","text":"Alternatively, install directly from the Julia REPL or in your scripts:","category":"page"},{"location":"userguide/installation/","page":"Installation","title":"Installation","text":"using Pkg\nPkg.add(url=\"https://github.com/CMOE-TUDelft/Mooring.jl\")","category":"page"},{"location":"userguide/installation/#Developing-locally","page":"Installation","title":"Developing locally","text":"","category":"section"},{"location":"userguide/installation/","page":"Installation","title":"Installation","text":"If you want to work on the code and documentation:","category":"page"},{"location":"userguide/installation/","page":"Installation","title":"Installation","text":"git clone https://github.com/CMOE-TUDelft/Mooring.jl\ncd Mooring.jl\njulia --project=docs/ -e 'using Pkg; Pkg.instantiate()'","category":"page"},{"location":"UserGuide/#User-Guide","page":"User Guide","title":"User Guide","text":"","category":"section"},{"location":"UserGuide/","page":"User Guide","title":"User Guide","text":"This user guide explains how to use Mooring.jl, a Julia package for modeling and simulation of mooring systems. ","category":"page"},{"location":"UserGuide/","page":"User Guide","title":"User Guide","text":"Here we follow a bottom-up approach: from defining points and materials, to segments and lines, and finally running full simulations with different point motions and seabed.","category":"page"},{"location":"UserGuide/","page":"User Guide","title":"User Guide","text":"Pages = [\n    \"userguide/installation.md\",\n    \"userguide/points.md\",\n    \"userguide/segments.md\",\n    \"userguide/lines.md\",\n    \"userguide/materials.md\",\n    \"userguide/drag.md\",\n    \"userguide/seabed.md\",\n    \"userguide/waves.md\",\n    \"userguide/simulation.md\",\n    \"userguide/visualization.md\",\n    \"userguide/export.md\"\n]\nDepth = 1","category":"page"},{"location":"API/Physics/EnvironmentalConditions/#Environmental-Conditions","page":"Environmental Conditions","title":"Environmental Conditions","text":"","category":"section"},{"location":"API/Physics/EnvironmentalConditions/#Mooring.EnvironmentalConditions.get_current_field-Tuple{Real, Any, WaveSpec.Currents.CurrentStat}","page":"Environmental Conditions","title":"Mooring.EnvironmentalConditions.get_current_field","text":"getcurrentfield\n\nThis function returns the current field at a given point of the undeformed configuration $ r \\rightarrow X_h(r) $.\n\nInput:\n\nr::Real: Point in the undeformed configuration\nXh::Function: Function that maps the undeformed configuration to the deformed configuration (VectorValue)\ncurObj::CurrentStat: Current object\n\nOutput:\n\nVectorValue: Current field at the point r\n\n\n\n\n\n","category":"method"},{"location":"API/Physics/EnvironmentalConditions/#Mooring.EnvironmentalConditions.get_input_spectrum-Tuple{Mooring.ParameterHandlers.WaveParameters}","page":"Environmental Conditions","title":"Mooring.EnvironmentalConditions.get_input_spectrum","text":"getinputspectrum\n\nThis function returns the wave spectrum parameters for a given set of wave parameters. The wave spectrum is calculated using the package WaveSpec.\n\n\n\n\n\n","category":"method"},{"location":"API/Physics/EnvironmentalConditions/#Mooring.EnvironmentalConditions.get_wave_velocity-Tuple{Any, Any, Any}","page":"Environmental Conditions","title":"Mooring.EnvironmentalConditions.get_wave_velocity","text":"getwavevelocity\n\nThis function returns the wave velocity at a given point in the space x. It uses the Airy wave theory, defined in the WaveSpec package.\n\nInput:\n\nt::Real: Time\nsp::SpecStruct: Wave spectrum parameters\nx::VectorValue: Point in the space\n\nOutput:\n\nVectorValue: Wave velocity at the point x\n\n\n\n\n\n","category":"method"},{"location":"API/Physics/Drag/#Drag-force","page":"Drag force","title":"Drag force","text":"","category":"section"},{"location":"API/Physics/Drag/#Mooring.Drag.ChainStudless","page":"Drag force","title":"Mooring.Drag.ChainStudless","text":"ChainStudless Struct\n\nThis type is used to define default drag properties for a studless chain.\n\n\n\n\n\n","category":"type"},{"location":"API/Physics/Drag/#Mooring.Drag.ChainStudlink","page":"Drag force","title":"Mooring.Drag.ChainStudlink","text":"ChainStudlink Struct\n\nThis type is used to define default drag properties for a studlink chain.\n\n\n\n\n\n","category":"type"},{"location":"API/Physics/Drag/#Mooring.Drag.Custom","page":"Drag force","title":"Mooring.Drag.Custom","text":"Custom Struct\n\nThis type is used to define custom drag properties.\n\n\n\n\n\n","category":"type"},{"location":"API/Physics/Drag/#Mooring.Drag.DragProperties","page":"Drag force","title":"Mooring.Drag.DragProperties","text":"DragProperties Struct\n\nThis struct contains the properties of the drag. The following parameters  are included, no default values are assumed.\n\ndragType::DragType: Type of drag\nρw::Real: Water density [Kg/m3]\nnd::Real: Nominal diameter [m]\nod::Real: Outer diameter [m]\nid::Real: Inner diameter [m]\nAStr::Real: Area (structural) [m2]\nCd_n::Real: Drag coefficient normal\nCd_t::Real: Drag coefficient tangent\ndd_n::Real: Drag diameter normal\ndd_t::Real: Drag diameter tangent\nCa_n::Real: Added mass coefficient normal\nCa_t::Real: Added mass coefficient tangent\nCfd_n::Real: Friction coefficient normal\nCfd_t::Real: Friction coefficient tangent\n\n\n\n\n\n","category":"type"},{"location":"API/Physics/Drag/#Mooring.Drag.DragProperties-Tuple{Mooring.Drag.ChainStudless, Any, Any}","page":"Drag force","title":"Mooring.Drag.DragProperties","text":"DragProperties Constructor\n\nThis function constructs the drag properties for the ChainStudless type.\n\nInput:\n\ndragType::ChainStudless: Type of drag\nnd::Real: Nominal diameter [m]\nAStr::Real: Area (structural) [m2]\n\nOptional parameters (with default values):\n\nCd_n::Real = 2.4: Drag coefficient normal\nCd_t::Real = 1.15: Drag coefficient tangent\nCa_n::Real = 1.0: Added mass coefficient\nCa_t::Real = 0.5: Added mass coefficient\nρw::Real = 1025: Water density [Kg/m3]\nod::Real = 1.80 * nd: Outer diameter [m]\nid::Real = 0.0: Inner diameter [m]\ndd_n::Real = nd: Drag diameter normal\ndd_t::Real = nd / π: Drag diameter tangent\n\nOutput:\n\nDragProperties: Drag properties\n\n\n\n\n\n","category":"method"},{"location":"API/Physics/Drag/#Mooring.Drag.DragProperties-Tuple{Mooring.Drag.ChainStudlink, Any, Any}","page":"Drag force","title":"Mooring.Drag.DragProperties","text":"DragProperties Constructor\n\nThis function constructs the drag properties for the ChainStudlink type.\n\nInput:\n\ndragType::ChainStudlink: Type of drag\nnd::Real: Nominal diameter [m]\nAStr::Real: Area (structural) [m2]\n\nOptional parameters (with default values):\n\nCd_n::Real = 2.6: Drag coefficient normal\nCd_t::Real = 1.4: Drag coefficient tangent\nCa_n::Real = 1.0: Added mass coefficient\nCa_t::Real = 0.5: Added mass coefficient\nρw::Real = 1025: Water density [Kg/m3]\nod::Real = 1.89 * nd: Outer diameter [m]\nid::Real = 0.0: Inner diameter [m]\ndd_n::Real = nd: Drag diameter normal\ndd_t::Real = nd / π: Drag diameter tangent\n\n\n\n\n\n","category":"method"},{"location":"API/Physics/Drag/#Mooring.Drag.DragProperties-Tuple{Mooring.Drag.Custom, Any, Any}","page":"Drag force","title":"Mooring.Drag.DragProperties","text":"DragProperties Constructor\n\nThis function constructs the drag properties for the Custom type.\n\nInput:\n\ndragType::Custom: Type of drag\nnd::Real: Nominal diameter [m]\nAStr::Real: Area (structural) [m2]\n\nOptional parameters (with default values):\n\nCd_n::Real: Drag coefficient normal\nCd_t::Real: Drag coefficient tangent\nCa_n::Real: Added mass coefficient\nCa_t::Real: Added mass coefficient\nρw::Real = 1025: Water density [Kg/m3]\nod::Real = nd: Outer diameter [m]\nid::Real = 0.0: Inner diameter [m]\ndd_n::Real = nd: Drag diameter normal\ndd_t::Real = nd / π: Drag diameter tangent\n\n\n\n\n\n","category":"method"},{"location":"API/Physics/Drag/#Mooring.Drag.DragProperties-Tuple{Mooring.Drag.NoDrag}","page":"Drag force","title":"Mooring.Drag.DragProperties","text":"DragProperties Constructor\n\nThis function constructs the drag properties for the NoDrag type.\n\nInput:\n\ndragType::NoDrag: Type of drag\n\nOutput:\n\nDragProperties: Drag properties\n\n\n\n\n\n","category":"method"},{"location":"API/Physics/Drag/#Mooring.Drag.DragType","page":"Drag force","title":"Mooring.Drag.DragType","text":"DragType Struct\n\nThis abstract type is used to define the type of drag. Possible implemented options are:\n\nNoDrag: No drag\nCustom: Custom drag\nChainStudless: Studless chain drag\nChainStudlink: Studlink chain drag\n\n\n\n\n\n","category":"type"},{"location":"API/Physics/Drag/#Mooring.Drag.NoDrag","page":"Drag force","title":"Mooring.Drag.NoDrag","text":"NoDrag Struct\n\nUsing this type all drag properties are set to zero.\n\n\n\n\n\n","category":"type"},{"location":"API/Physics/Drag/#Mooring.Drag.drag_ΓX-Tuple{Mooring.Drag.DragProperties, Real, Gridap.TensorValues.VectorValue, Gridap.TensorValues.VectorValue}","page":"Drag force","title":"Mooring.Drag.drag_ΓX","text":"drag_ΓX\n\nThis function calculates the drag force on the line. The drag force is given by:\n\nF_textdrag = (C_textfd_n cdot v_n cdot v_n + C_textfd_t cdot v_t cdot v_t) cdot s_Lambda\n\nInput:\n\ndragProp::DragProperties: Drag properties\nsΛ::Real: line stretch\nt::VectorValue: Line tangent\nvr::VectorValue: Relative velocity\n\nOutput:\n\nVectorValue: Drag force\n\n\n\n\n\n","category":"method"},{"location":"API/Physics/Drag/#Mooring.Drag.relative_velocity-Tuple{Gridap.TensorValues.VectorValue, Gridap.TensorValues.VectorValue}","page":"Drag force","title":"Mooring.Drag.relative_velocity","text":"relative_velocity\n\nThis function calculates the relative velocity between the line and the fluid. This implementation computes the difference between the line ($ v ) and the fluid ( u $) velocities, $ v_{\\text{rel}} = u - v $.\n\nInput:\n\nu::VectorValue: Fluid velocity\nv::VectorValue: Line velocity\n\nOutput:\n\nVectorValue: Relative velocity\n\n\n\n\n\n","category":"method"},{"location":"API/Physics/Drag/#Mooring.Drag.relative_velocity-Tuple{Gridap.TensorValues.VectorValue}","page":"Drag force","title":"Mooring.Drag.relative_velocity","text":"relative_velocity\n\nThis function calculates the relative velocity between the line and the fluid. The default implementation  is the negative of the line velocity, $ v_{\\text{rel}} = -v $.\n\nInput:\n\nv::VectorValue: Line velocity\n\nOutput:\n\nVectorValue: Relative velocity\n\n\n\n\n\n","category":"method"},{"location":"API/Physics/Drag/#Mooring.Drag.relative_velocity-Tuple{Real, WaveSpec.WaveTimeSeries.TimeRampTypeAll, Gridap.TensorValues.VectorValue, Gridap.TensorValues.VectorValue}","page":"Drag force","title":"Mooring.Drag.relative_velocity","text":"relative_velocity\n\nThis function calculates the relative velocity between the line and the fluid. This implementation computes the difference between the line ($ v ) and the fluid ( u ) velocities assuming a time ramp function for the fluid velocity ( \\alpha(t) $). The relative velocity is given by $ v_{\\text{rel}} = \\alpha(t)*u - v $.\n\nInput:\n\nt::Real: Time\ninput_ramp::WTS.TimeRampTypeAll: Time ramp function for the fluid velocity\nu::VectorValue: Fluid velocity\nv::VectorValue: Line velocity\n\nOutput:\n\nVectorValue: Relative velocity\n\n\n\n\n\n","category":"method"},{"location":"API/IO/ParameterHandler/#Parameter-Handler","page":"Input/Output","title":"Parameter Handler","text":"","category":"section"},{"location":"API/IO/ParameterHandler/#Mooring.ParameterHandlers.DragParameters","page":"Input/Output","title":"Mooring.ParameterHandlers.DragParameters","text":"DragParameters\n\nThis struct is used to define the drag properties of a segment in the mooring system.   The default type is \"NoDrag\", which does not require additional parameters. Possible drag   types are:\n\n\"NoDrag\": No drag forces\n\"Custom\": Custom drag force from the following custom coefficients:   Required input parameters:\nnd::Real: Nominal diameter [m]\nAStr::Real: Area (structural) [m2]\nOptional parameters (with default values):\nCd_n::Real: Drag coefficient normal\nCd_t::Real: Drag coefficient tangent\nCa_n::Real: Added mass coefficient\nCa_t::Real: Added mass coefficient\nρw::Real = 1025: Water density [Kg/m3]\nod::Real = nd: Outer diameter [m]\nid::Real = 0.0: Inner diameter [m]\ndd_n::Real = nd: Drag diameter normal\ndd_t::Real = nd / π: Drag diameter tangent\n\"ChainStudless\": Chain studless drag properties   Required input parameters:\nnd::Real: Nominal diameter [m]\nAStr::Real: Area (structural) [m2]\nOptional parameters (with default values):\nCd_n::Real = 2.4: Drag coefficient normal\nCd_t::Real = 1.15: Drag coefficient tangent\nCa_n::Real = 1.0: Added mass coefficient\nCa_t::Real = 0.5: Added mass coefficient\nρw::Real = 1025: Water density [Kg/m3]\nod::Real = 1.80 * nd: Outer diameter [m]\nid::Real = 0.0: Inner diameter [m]\ndd_n::Real = nd: Drag diameter normal\ndd_t::Real = nd / π: Drag diameter tangent\n\n\n\n\n\n","category":"type"},{"location":"API/IO/ParameterHandler/#Mooring.ParameterHandlers.LineParameters","page":"Input/Output","title":"Mooring.ParameterHandlers.LineParameters","text":"LineParameters\n\nThis struct is used to define a line in the mooring system. It contains the list of points and segments   of the line. The following default values are used:     - id::Int=1: Unique identifier for the line.     - tag::String=\"Line_1\": Human-readable name for the line.     - points::Vector{Int}=[1,2]: List of point IDs.     - segments::Vector{Int}=[1]: List of segment IDs.\n\n\n\n\n\n","category":"type"},{"location":"API/IO/ParameterHandler/#Mooring.ParameterHandlers.LineParameters-Tuple{Int64}","page":"Input/Output","title":"Mooring.ParameterHandlers.LineParameters","text":"LineParameters constructor\n\nThis constructor creates a new instance of the LineParameters struct with the given ID and optional parameters.\n\n\n\n\n\n","category":"method"},{"location":"API/IO/ParameterHandler/#Mooring.ParameterHandlers.MaterialParameters","page":"Input/Output","title":"Mooring.ParameterHandlers.MaterialParameters","text":"MaterialParameters\n\nThis struct contains the material properties for a given mooring segment. There are two implemented material models: \"LinearElastic\" and \"Scharpery\". The default choice is \"LinearElastic\". The following parameters and default values are used:\n\ntag::String = \"default_material\": Identifier for the material\ntype::String = \"LinearElastic\": Material model type\n\nFor LinearElastic:\n\nE::Real = 1.0: Young's modulus\nν::Real = 0.3: Poisson's ratio\n\nFor Scharpery:\n\nD0::Real = 1.0: Elastic compliance\nN::Int = 1: Number of relaxation times\nDn::Vector{Real} = [1.0]: Compliance for each relaxation time\nλn::Vector{Real} = [1.0]: Inverse of relaxation times\ng0::String = \"1.0\": function of σ in string format\ng1::String = \"1.0\": function of σ in string format\ng2::String = \"1.0\": function of σ in string format\n\n\n\n\n\n","category":"type"},{"location":"API/IO/ParameterHandler/#Mooring.ParameterHandlers.MotionParameters","page":"Input/Output","title":"Mooring.ParameterHandlers.MotionParameters","text":"MotionParameters\n\nThis struct contains the parameters required to describe a point motion. The following motion  types are supported:\n\nCustomMotion: User-defined motion with custom function.\nWaveMotion: Motion driven by wave parameters.\nNothing: No motion applied, the point is free to move.\n\nThe following parameters and default values are used:\n\ntag::String = \"default_motion\": Identifier for the motion\ntype::String = \"CustomMotion\": Type of motion\n\nfor CustomMotion:\n\nf::String = \"0.0\": function f(t,x,y,z) of time (t) and position (x,y,z) in string format\n\nfor WaveMotion:\n\nwavetag::String = \"defaultwaves\": Identifier for the wave motion\n\n\n\n\n\n","category":"type"},{"location":"API/IO/ParameterHandler/#Mooring.ParameterHandlers.ParameterHandler","page":"Input/Output","title":"Mooring.ParameterHandlers.ParameterHandler","text":"ParameterHandler\n\nCentral container for all parameters in a mooring system experiment. It aggregates all other parameter structs into a single unified object.\n\nFields\n\npoints::Dict{Int, PointParameters} : Dictionary of point parameters keyed by point ID\nsegments::Dict{Int, SegmentParameters} : Dictionary of segment parameters keyed by segment ID\nlines::Dict{Int, LineParameters} : Dictionary of line parameters keyed by line ID\ndrags::Dict{String, DragParameters} : Dictionary of drag properties keyed by drag tag\nwaves::Dict{String, WaveParameters} : Dictionary of wave parameter sets keyed by wave tag\nmaterials::Dict{String, MaterialParameters} : Dictionary of material models keyed by material tag\nmotions::Dict{String, MotionParameters} : Dictionary of motions keyed by motion tag\nseabeds::Dict{String, SeaBedParameters} : Dictionary of seabed parameter sets keyed by tag\n\nUsage\n\n```julia ph = ParameterHandler()\n\nAdd a point\n\nph.points[1] = PointParameters(id=1, coords=[0.0,0.0])\n\nAdd seabed\n\nph.seabeds[\"default\"] = SeaBedParameters()\n\nQuery material\n\nsteel = ph.materials[\"steel\"]\n\n\n\n\n\n","category":"type"},{"location":"API/IO/ParameterHandler/#Mooring.ParameterHandlers.ParameterHandler-Tuple{}","page":"Input/Output","title":"Mooring.ParameterHandlers.ParameterHandler","text":"ParameterHandler constructor\n\nCreate a ParameterHandler with default parameters.\n\n\n\n\n\n","category":"method"},{"location":"API/IO/ParameterHandler/#Mooring.ParameterHandlers.PointParameters","page":"Input/Output","title":"Mooring.ParameterHandlers.PointParameters","text":"PointParameters\n\nThis struct is used to define a point in the mooring system. It contains all relevant information   about the point's position, motion, and mesh size. The following parameters are included, with default   values provided for convenience:     - id::Int=1: Unique identifier for the point.     - tag::String=\"Point_1\": Human-readable name for the point.     - coords::Vector{Float64}=[0.0, 0.0]: 2D coordinates of the point.     - motion_tag::String=\"default\": Tag for the point's motion characteristics.     - mesh_size::Float64=1.0: Mesh size for the point.\n\n\n\n\n\n","category":"type"},{"location":"API/IO/ParameterHandler/#Mooring.ParameterHandlers.PointParameters-Tuple{Int64}","page":"Input/Output","title":"Mooring.ParameterHandlers.PointParameters","text":"PointParameters constructor\n\nThis constructor creates a new instance of the PointParameters struct with the given ID and optional parameters.\n\n\n\n\n\n","category":"method"},{"location":"API/IO/ParameterHandler/#Mooring.ParameterHandlers.SeaBedParameters","page":"Input/Output","title":"Mooring.ParameterHandlers.SeaBedParameters","text":"SeaBedParameters Struct\n\nThis struct contains the properties of the seabed. The following parameters are included, with default values:\n\ntag::String = \"default_seabed\": Identifier for the seabed\nkn::Real = 30e3: Normal stiffness [N/m2]\nlinear_damping_factor::Real = 0.05: Linear damping ratio [s]\nquadratic_damping_factor::Real = 0.0: Quadratic damping ratio [s^2/m]\nod::Real = 0.1: Outer diameter of the line [m]\nA::Real = 0.008: Area of the line [m^2]\ntanh_ramp::Real = 1e2: Tanh ramp function parameter \npenetration_depth_ramp::Real = 1e-3: Penetration depth ramp function parameter [m]\nstill_weight::Real = 0.0: Still weight [N]\ncnstz::Real = 0.0: Constant spring stiffness of the sea bed [N/m]\n\nRelevant references:\n\nQuadratic law impact damping: https://doi.org/10.1080/0020739X.2021.1954253\nCritical damping of Moordyn: https://moordyn.readthedocs.io/en/latest/troubleshooting.html#model-stability-and-segment-damping\n\n\n\n\n\n","category":"type"},{"location":"API/IO/ParameterHandler/#Mooring.ParameterHandlers.SegmentParameters","page":"Input/Output","title":"Mooring.ParameterHandlers.SegmentParameters","text":"SegmentParameters\n\nThis struct is used to define a segment in the mooring system. It contains all relevant information about the segment properties. The following parameters and default values are used:\n\nid::Int=1: Unique identifier for the segment.\ntag::String=\"Segment_1\": Human-readable name for the segment.\nstart_point::Int=1: ID of the starting point.\nstop_point::Int=2: ID of the stopping point.\nlength::Float64=10.0: Length of the segment.\nmaterial::String=\"steel\": Material of the segment.\ndensity::Float64=7850.0: Density of the segment material.\narea::Float64=0.01: Cross-sectional area of the segment.\ndrag_tag::String=\"default\": Tag for the segment's drag characteristics.\n\n\n\n\n\n","category":"type"},{"location":"API/IO/ParameterHandler/#Mooring.ParameterHandlers.SegmentParameters-Tuple{Int64}","page":"Input/Output","title":"Mooring.ParameterHandlers.SegmentParameters","text":"SegmentParameters constructor\n\nThis constructor creates a new instance of the SegmentParameters struct with the given ID and optional parameters.\n\n\n\n\n\n","category":"method"},{"location":"API/IO/ParameterHandler/#Mooring.ParameterHandlers.WaveParameters","page":"Input/Output","title":"Mooring.ParameterHandlers.WaveParameters","text":"WaveParameters\n\nThis struct contains the parameters for the wave conditions. The following parameters are included, with default values:\n\nHs::Real = 0.0: Significant wave height\nTp::Real = 0.0: Peak wave period\nh0::Real = 100.0: Water depth\nnω::Int = 64: Number of frequency components\nseed::Int = 0: Seed for random phase\nωc::Real = -1.0: Cut-off frequency\nenableWaveSpec::Bool = false: Enable wave spectrum\n\n\n\n\n\n","category":"type"},{"location":"API/IO/ParameterHandler/#Mooring.ParameterHandlers._dict_to_handler-Tuple{Dict}","page":"Input/Output","title":"Mooring.ParameterHandlers._dict_to_handler","text":"_dict_to_handler(data::Dict) -> ParameterHandler\n\nConvert a parsed YAML/JSON dictionary into a ParameterHandler.\n\n\n\n\n\n","category":"method"},{"location":"API/IO/ParameterHandler/#Mooring.ParameterHandlers._dict_to_json-Tuple{Any}","page":"Input/Output","title":"Mooring.ParameterHandlers._dict_to_json","text":"dictto_json(x)\n\nRecursively convert a Julia dictionary or array to a JSON3-compatible format.\n\n\n\n\n\n","category":"method"},{"location":"API/IO/ParameterHandler/#Mooring.ParameterHandlers._handler_to_dict-Tuple{Mooring.ParameterHandlers.ParameterHandler}","page":"Input/Output","title":"Mooring.ParameterHandlers._handler_to_dict","text":"_handler_to_dict(ph::ParameterHandler) -> Dict\n\nConvert a ParameterHandler back into a dictionary for YAML/JSON export.\n\n\n\n\n\n","category":"method"},{"location":"API/IO/ParameterHandler/#Mooring.ParameterHandlers._json_to_dict-Tuple{Any}","page":"Input/Output","title":"Mooring.ParameterHandlers._json_to_dict","text":"_json_to_dict(x)\n\nRecursively convert JSON3.Object / JSON3.Array to plain Julia Dict{String,Any} / Vector{Any} for uniform handling.\n\n\n\n\n\n","category":"method"},{"location":"API/IO/ParameterHandler/#Mooring.ParameterHandlers.load_from_json-Tuple{String}","page":"Input/Output","title":"Mooring.ParameterHandlers.load_from_json","text":"load_from_json(path::String) -> ParameterHandler\n\nLoad a JSON file defining experiment parameters into a ParameterHandler.\n\n\n\n\n\n","category":"method"},{"location":"API/IO/ParameterHandler/#Mooring.ParameterHandlers.load_from_yaml-Tuple{String}","page":"Input/Output","title":"Mooring.ParameterHandlers.load_from_yaml","text":"load_from_yaml(path::String) -> ParameterHandler\n\nLoad a YAML file defining experiment parameters into a ParameterHandler.\n\n\n\n\n\n","category":"method"},{"location":"API/IO/ParameterHandler/#Mooring.ParameterHandlers.save_to_json-Tuple{Mooring.ParameterHandlers.ParameterHandler, String}","page":"Input/Output","title":"Mooring.ParameterHandlers.save_to_json","text":"save_to_json(ph::ParameterHandler, path::String)\n\nSave the current parameter handler into a JSON file.\n\n\n\n\n\n","category":"method"},{"location":"API/IO/ParameterHandler/#Mooring.ParameterHandlers.save_to_yaml-Tuple{Mooring.ParameterHandlers.ParameterHandler, String}","page":"Input/Output","title":"Mooring.ParameterHandlers.save_to_yaml","text":"save_to_yaml(ph::ParameterHandler, path::String)\n\nSave the current parameter handler into a YAML file.\n\n\n\n\n\n","category":"method"},{"location":"GettingStarted/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"userguide/lines/#Defining-Lines","page":"Lines","title":"Defining Lines","text":"","category":"section"},{"location":"userguide/lines/","page":"Lines","title":"Lines","text":"Mooring lines are assemblies of mooring segments and points that define the geometry and behavior of a complete line in the mooring system.   Each line connects (multiple) anchors to (multiple) fairleads, or intermediate points, through one or more segments.","category":"page"},{"location":"userguide/lines/","page":"Lines","title":"Lines","text":"Each line is defined by:","category":"page"},{"location":"userguide/lines/","page":"Lines","title":"Lines","text":"id::Ing - unique integer identifier\ntag::String – unique identifier of the line\npoints::Vector{Int} – list of point IDs that belong to this line  \nsegments::Vector{Int} – list of segment IDs that form the line  ","category":"page"},{"location":"userguide/lines/","page":"Lines","title":"Lines","text":"","category":"page"},{"location":"userguide/lines/#YAML-example","page":"Lines","title":"YAML example","text":"","category":"section"},{"location":"userguide/lines/","page":"Lines","title":"Lines","text":"lines:\n  - id: 1\n    tag: line1\n    points: [1, 2]\n    segments: [1]","category":"page"},{"location":"userguide/lines/","page":"Lines","title":"Lines","text":"In this example:","category":"page"},{"location":"userguide/lines/","page":"Lines","title":"Lines","text":"A single line (line1) is created. It uses two points (\"anchor\" at the seabed and \"fairlead\" at the floater). These are connected by one segment (seg1, see example in Mooring Segments).","category":"page"},{"location":"userguide/lines/","page":"Lines","title":"Lines","text":"","category":"page"},{"location":"userguide/lines/#Julia-example","page":"Lines","title":"Julia example","text":"","category":"section"},{"location":"userguide/lines/","page":"Lines","title":"Lines","text":"using Mooring\nimport Mooring.ParameterHandler as PH\nph.points[1] = PH.PointParameters(id=1, coords=[0.0,0.0,-50.0], motion_tag=\"fixed\")\nph.points[2] = PH.PointParameters(id=2, coords=[10.0,0.0,0.0], motion_tag=\"fairlead_motion\")\nph.segments[1] = PH.SegmentParameters(id=1, start_point=1, stop_point=2, material_tag=\"steel\", area=0.01,\n                                      density=7850.0, length=10.0, drag_tag=\"no_drag\", seabed_tag=\"default_seabed\")\nph.lines[1] = PH.LineParameters(id=1, points=[1,2], segments=[1])","category":"page"},{"location":"userguide/lines/","page":"Lines","title":"Lines","text":"","category":"page"},{"location":"userguide/lines/","page":"Lines","title":"Lines","text":"Lines may consist of several segments joined together. Example:","category":"page"},{"location":"userguide/lines/","page":"Lines","title":"Lines","text":"points:\n  - id: 1\n    tag: anchor\n    coords: [0.0, 0.0, -100.0]\n  - id: 2\n    tag: midpoint\n    coords: [25.0, 0.0, -50.0]\n  - id: 3\n    tag: fairlead\n    coords: [50.0, 0.0, 0.0]\n\nsegments:\n  - id: 1\n    tag: lower\n    start_point: 1\n    stop_point: 2\n    material: chain\n    area: 0.007\n    density: 7700.0\n  - id: 2\n    tag: upper\n    start_point: 2\n    stop_point: 3\n    material: polyester\n    area: 0.004\n    density: 1400.0\nlines:\n  - id: 1\n    tag: hybrid_line\n    points: [1, 2, 3]\n    segments: [1, 2]","category":"page"},{"location":"userguide/lines/","page":"Lines","title":"Lines","text":"This defines a hybrid line:","category":"page"},{"location":"userguide/lines/","page":"Lines","title":"Lines","text":"Lower segment = chain (anchor → midpoint).\nUpper segment = polyester rope (midpoint → fairlead).","category":"page"},{"location":"userguide/lines/","page":"Lines","title":"Lines","text":"Lines are the system-level building blocks and are used to define MooringLine objects, which are the highest level entities in the simulation workflow.","category":"page"},{"location":"API/API/#API-documentation","page":"API documentation","title":"API documentation","text":"","category":"section"},{"location":"userguide/points/#Defining-Points","page":"Points","title":"Defining Points","text":"","category":"section"},{"location":"userguide/points/","page":"Points","title":"Points","text":"Points define the ends of segments. They represent fixed or moving anchors, fairleads or connection points in a mooring system.","category":"page"},{"location":"userguide/points/","page":"Points","title":"Points","text":"They can be fixed (e.g. anchors on the seabed) or moving (e.g. connection points on a floating platform).  ","category":"page"},{"location":"userguide/points/","page":"Points","title":"Points","text":"Each point is defined by:","category":"page"},{"location":"userguide/points/","page":"Points","title":"Points","text":"id::Int - a unique integer identifier\ntag::String – a unique name or identifier\ncoords::Vector{Float64} – spatial coordinates [x,y,z] in meters\nmotion::String – type name of the motion constraint (\"fixed\", \"prescribed\", or \"free\")\nmesh_size::Float - (optional) additional parameters to prescribe mesh size","category":"page"},{"location":"userguide/points/","page":"Points","title":"Points","text":"See PointParameters for a description of all possible parameters.","category":"page"},{"location":"userguide/points/","page":"Points","title":"Points","text":"","category":"page"},{"location":"userguide/points/#YAML-Example","page":"Points","title":"YAML Example","text":"","category":"section"},{"location":"userguide/points/","page":"Points","title":"Points","text":"We can define a point through the YAML parameter handler. Here is an example of two points named \"anchor\" and \"fairlead\", for which we specify the motion tags \"fixedmotion\" and \"fairleadmotion\". Note that these motions are defined through the PointMotion type, see also Point Motion.","category":"page"},{"location":"userguide/points/","page":"Points","title":"Points","text":"points:\n  - id: 1\n    tag: anchor\n    coords: [0.0, 0.0, -50.0]\n    motion_tag: \"fixed\"\n  - id: 2\n    tag: fairlead\n    coords: [10.0, 0.0, 0.0]\n    motion_tag: \"fairlead_motion\"","category":"page"},{"location":"userguide/points/","page":"Points","title":"Points","text":"","category":"page"},{"location":"userguide/points/#Julia-Example","page":"Points","title":"Julia Example","text":"","category":"section"},{"location":"userguide/points/","page":"Points","title":"Points","text":"The same points can be directly defined in a julia script.","category":"page"},{"location":"userguide/points/","page":"Points","title":"Points","text":"using Mooring\nimport Mooring.ParameterHandler as PH\nph.points[1] = PH.PointParameters(id=1, coords=[0.0,0.0,-50.0], motion_tag=\"fixed\")\nph.points[2] = PH.PointParameters(id=2, coords=[10.0,0.0,0.0], motion_tag=\"fairlead_motion\")","category":"page"},{"location":"userguide/points/","page":"Points","title":"Points","text":"Points are turned into MooringPoint objects during line setup.","category":"page"},{"location":"#Mooring.jl","page":"Home","title":"Mooring.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Mooring.jl is a Julia package for simulating mooring lines using the Finite Element Method. The package is based on dynamic finite strain theory and tangential differential calculus. Mooring.jl supports linear elastic, nonlinear elastic and nonlinear viscoelastic material properties, providing an accurate and efficient framework for modeling the behavior of mooring lines in offshore applications, either for chain/steel based cables or synthetic ropes.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Finite Element Method (FEM) for high-fidelity mooring line simulations, with arbitrary order of interpolation\nDynamic finite strain theory for large deformation analysis\nTangential differential calculus for geometric consistency in simulations with complex material models\nLinear and nonlinear material models including viscoelastic effects, relevant for synthetic ropes\nEfficient time integration schemes for dynamic analysis\nModular and extensible design for research and engineering applications","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install the latest version of Mooring.jl:","category":"page"},{"location":"#Using-Pkg-REPL-mode-(recommended)","page":"Home","title":"Using Pkg REPL mode (recommended)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Open Julia  \nEnter the package manager by typing ]  \nAdd the package with:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add https://github.com/CMOE-TUDelft/Mooring.jl","category":"page"},{"location":"#Using-Pkg-in-scripts","page":"Home","title":"Using Pkg in scripts","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Alternatively, install directly from the Julia REPL or in your scripts:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(url=\"https://github.com/CMOE-TUDelft/Mooring.jl\")","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"#Basic-Example","page":"Home","title":"Basic Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Mooring\n\n# TO DO","category":"page"},{"location":"#Results","page":"Home","title":"Results","text":"","category":"section"},{"location":"#Example-Simulation-Output","page":"Home","title":"Example Simulation Output","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Below is an example of a mooring line under wave loading:","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Include plots or numerical results here)","category":"page"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Contributions are welcome! If you find a bug or have a feature request, please open an issue or submit a pull request. Please, use the CONTRIBUTING.md guidelines.","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is licensed under the MIT License.","category":"page"},{"location":"#Authors","page":"Home","title":"Authors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This repository has been developed by Shagun Agarwal and Oriol Colomés. See also the list of Contributors.","category":"page"},{"location":"#Contact","page":"Home","title":"Contact","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For questions or collaboration, please reach out to the authors or post an issue to the repository.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Known-issues","page":"Home","title":"Known issues","text":"","category":"section"},{"location":"#Updating-Specific-Dependencies","page":"Home","title":"Updating Specific Dependencies","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you need to update specific dependencies to newer versions, enter package manager mode (]) and run:","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Mooring) pkg> add https://github.com/shagunTUD/Gridap.jl#devMoor\n(Mooring) pkg> add https://github.com/shagun751/WaveSpec.jl#main","category":"page"},{"location":"","page":"Home","title":"Home","text":"This will fetch and install the specified versions from their respective repositories.","category":"page"},{"location":"#Additional-Notes","page":"Home","title":"Additional Notes","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you run into issues with missing dependencies, try running ] resolve in Julia to fix package compatibility.\nEnsure that your Julia version matches the one specified in Project.toml to avoid compatibility issues.","category":"page"}]
}
